{"version":3,"sources":["serviceWorker.js","index.js","components/App.js","components/Navbar.js","box.png","components/Main.js","components/helpers.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ipfs","require","ipfsClient","host","port","protocol","Component","componentWillMount","loadWeb3","loadBlockchainData","ethereum","web3","Web3","enable","currentProvider","alert","console","log","eth","getAccounts","accounts","setState","account","net","getId","networkId","networkData","DStorage","networks","dstorage","Contract","abi","address","methods","fileCount","call","i","files","file","state","loading","constructor","props","super","captureFile","event","preventDefault","target","reader","FileReader","readAsArrayBuffer","onloadend","this","buffer","Buffer","result","type","name","uploadFile","description","add","error","hash","size","send","from","on","reload","e","id","className","Navbar","href","rel","src","box","width","height","alt","substring","Identicon","toString","module","exports","Main","role","style","maxWidth","onSubmit","fileDescription","value","ref","input","placeholder","required","onChange","maxHeight","scope","map","key","fileId","fileName","fileType","bytes","parseInt","Math","floor","round","pow","convertBytes","fileSize","moment","unix","uploadTime","format","uploader","fileHash"],"mappings":"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","file":"static/js/main.88a8ec88.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import DStorage from '../abis/DStorage.json'\nimport React, { Component } from 'react';\nimport Navbar from './Navbar'\nimport Main from './Main'\nimport Web3 from 'web3';\nimport './App.css';\n\n//Declare IPFS\nconst ipfsClient = require('ipfs-http-client');\nconst ipfs = ipfsClient({host: \"ipfs.infura.io\",port:5001, protocol:'https'})\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n    //Setting up Web3\n  }\n\n  async loadBlockchainData() {\n    //Declare Web3\n    const web3 = window.web3;\n    console.log(web3);\n\n    //Load account\n    const accounts = await web3.eth.getAccounts();\n    this.setState({ account: accounts[0]});\n\n    const networkId = await web3.eth.net.getId();\n    const networkData = DStorage.networks[networkId];\n\n    if (networkData){\n\n      const dstorage = new web3.eth.Contract(DStorage.abi, networkData.address)\n      this.setState({dstorage});\n\n      const fileCount = await dstorage.methods.fileCount().call();\n      if (fileCount>0){\n      this.setState({fileCount});\n      \n      for(var i = fileCount; i>=1; i--){\n        const file = await dstorage.methods.files(i).call();\n        this.setState({\n          files: [...this.state.files, file]\n        })\n      }\n    }\n  }\n    else{\n      window.alert('DStorage contract not deployed  to detected network');\n    }\n    this.setState({loading: false});\n\n    //Network ID\n\n    //IF got connection, get data from contracts\n      //Assign contract\n\n      //Get files amount\n\n      //Load files&sort by the newest\n\n    //Else\n      //alert Error\n\n  }\n\n  // Get file from user\n  captureFile = event => {\n    event.preventDefault();\n\n    const file = event.target.files[0];\n    const reader = new window.FileReader();\n\n    reader.readAsArrayBuffer(file)\n    reader.onloadend = () =>{\n      this.setState({\n        buffer: Buffer(reader.result),\n        type: file.type,\n        name: file.name\n      })\n      console.log('buffer', this.state.buffer);\n    }\n  }\n\n\n  //Upload File\n  uploadFile = description => {\n    console.log(\"Uploading file to IPFS  !\")\n    //Add file to the IPFS\n    ipfs.add(this.state.buffer, (error, result) =>{\n      console.log('IPFS result', result)\n      //Check If error\n      if (error){\n        console.error(error)\n        return\n      }  \n      //Return error\n      this.setState({ loading: true })\n\n      this.state.dstorage.methods.uploadFile(result[0].hash, result[0].size, this.state.type, this.state.name, description).send({from: this.state.account}).on('transactionHash', (hash) =>{\n      this.setState({\n        loading: false,\n        type: null,\n        name: null\n      })\n      window.location.reload()\n      //Set state to loading\n\n      //Assign value for the file without extension\n\n      //Call smart contract uploadFile function \n\n  }).on('error', (e) => {\n    window.alert(\"Error\");\n    this.setState({loading: false})\n  })\n})\n  }\n\n  //Set states\n  constructor(props) {\n    super(props)\n    this.state = {\n      account : '',\n      dstorage : null,\n      files:[],\n      loading: false,\n      type: null,\n      name: null\n    }\n\n    //Bind functions\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        { this.state.loading\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\n          : <Main\n              files={this.state.files}\n              captureFile={this.captureFile}\n              uploadFile={this.uploadFile}\n            />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;","import React, { Component } from 'react';\nimport Identicon from 'identicon.js';\nimport box from '../box.png'\n\nclass Navbar extends Component {\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-dark bg-dark p-0 text-monospace\">\n        <a\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n          href=\"http://www.dappuniversity.com/bootcamp\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img src={box} width=\"30\" height=\"30\" className=\"align-top\" alt=\"\" />\n          OPENSTORAGE\n        </a>\n        <ul className=\"navbar-nav px-3\">\n          <li>\n          <b className='text-white'>{this.props.account?this.props.account.substring(0,4):\"0x0\"}...{this.props.account?this.props.account.substring(38,42):\"0x0\"}</b>\n          { this.props.account ? <img alt=\"\" className=\"ml-2\" width='30' height='30'\n          src={`data:image/png;base64, ${new Identicon(this.props.account, 30).toString()}`}\n          />:<span></span>}\n        </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;","module.exports = __webpack_public_path__ + \"static/media/box.df8b84d5.png\";","import React, { Component } from 'react';\nimport { convertBytes } from './helpers';\nimport moment from 'moment'\n\nclass Main extends Component {\n\n  render() {\n    return (\n      <div className=\"container-fluid mt-5 text-center\">\n        <div className=\"row\">\n          <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '1024px' }}>\n            <div className=\"content\">\n              <p>&nbsp;</p>\n             \n             <div className='card mb-3 mx-auto bg-dark' style={{maxWidth: '512px'}}>\n               <h2 className='text-white text-monospace bg-dark'><b><ins>Share File</ins></b></h2>\n               <form onSubmit={(event) =>{\n                 event.preventDefault();\n                 const description = this.fileDescription.value;\n                 this.props.uploadFile(description);\n               }}>\n                 <div className='form-group'>\n                   <br></br>\n                   <input id=\"fileDescription\" \n                   type=\"text\"\n                   ref={(input) => {this.fileDescription = input }}\n                   className='form-control text-monospace'\n                   placeholder=\"description...\"\n                   required />\n                 </div>\n                 <input type = \"file\" onChange={this.props.captureFile} className='text-white text-monospace' />\n                 <button type=\"submit\" className=\"btn-primary btn-block\"><b>Upload!</b></button>\n               </form>\n               </div>\n              <p>&nbsp;</p>\n              <table className=\"table-sm table-bordered text-monospace\" style={{ width: '1000px', maxHeight: '450px'}}>\n              <thead style={{ 'fontSize': '15px'}}>\n                <tr className='bg-dark text-white'>\n                  <th scope='col' style={{ width: '10px'}}>id</th>\n                  <th scope='col' style={{ width: '200px'}}>name</th>\n                  <th scope='col' style={{ width: '230px'}}>description</th>\n                  <th scope='col' style={{ width: '120px'}}>type</th>\n                  <th scope='col' style={{ width: '90px'}}>size</th>\n                  <th scope='col' style={{ width: '90px'}}>date</th>\n                  <th scope='col' style={{ width: '120px'}}>uploader</th>\n                  <th scope='col' style={{ width: '120px'}}>hash/view/get</th>\n                </tr>\n              </thead>\n              { this.props.files.map((file, key) => {\n                  return(\n                    <thead style={{ 'fontSize': '12px' }} key={key}>\n                      <tr>\n                        <td>{file.fileId}</td>\n                        <td>{file.fileName}</td>\n                        <td>{file.fileDescription}</td>\n                        <td>{file.fileType}</td>\n                        <td>{convertBytes(file.fileSize)}</td>\n                        <td>{moment.unix(file.uploadTime).format('h:mm:ss A M/D/Y')}</td>\n                        <td>\n                          <a\n                            href={\"https://etherscan.io/address/\" + file.uploader}\n                            rel=\"noopener noreferrer\"\n                            target=\"_blank\">\n                            {file.uploader.substring(0,10)}...\n                          </a>\n                         </td>\n                        <td>\n                          <a\n                            href={\"https://ipfs.infura.io/ipfs/\" + file.fileHash}\n                            rel=\"noopener noreferrer\"\n                            target=\"_blank\">\n                            {file.fileHash.substring(0,10)}...\n                          </a>\n                        </td>\n                      </tr>\n                    </thead>\n                )\n              })}\n              </table>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;","export function convertBytes(bytes) {\r\n   var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n   if (bytes === 0) return '0 Byte';\r\n   var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\r\n   return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];\r\n}"],"sourceRoot":""}